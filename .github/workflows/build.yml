name: Build
run-name: "${{ github.event_name == 'schedule' && 'Daily master build' || format('Release build for {0}', github.ref) }}"

permissions:
  contents: write

on:
  push:
    tags:
      - '*'
    branches:
      - 'dev-*'
  schedule:
    - cron: '0 0 * * *'

jobs:

  prepare-builder-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and export
      uses: docker/build-push-action@v5
      with:
        context: .
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: builder-image:latest
        outputs: type=docker,dest=/tmp/builder-image.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: builder-image
        path: /tmp/builder-image.tar
        compression-level: 0

  prepare-tester-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and export
      uses: docker/build-push-action@v5
      with:
        file: tests/Dockerfile.ubuntu2004
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: tester-image:ubuntu2004
        outputs: type=docker,dest=/tmp/tester-image_ubuntu2004.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tester-image_ubuntu2004
        path: /tmp/tester-image_ubuntu2004.tar
        compression-level: 0

  setup-vars:
    runs-on: ubuntu-latest
    steps:
      - name: Setup matrix source
        id: setup-vars
        run: |
          SOURCES='
            {"name": "29.3", "repo": "emacs-mirror/emacs", ref: "emacs-29.3" },
            {"name": "master-mps", "repo": "emacs-mirror/emacs", ref: "scratch/igc" },
          '
          if [ $GITHUB_EVENT_NAME = "schedule" ]; then
            SOURCES='
              {"name": "master", "repo": "emacs-mirror/emacs", ref: "master" }
            '
          fi
          echo sources=[$SOURCES] >> $GITHUB_OUTPUT
          echo datetimestr=$(date +%Y%m%d-%H%M) >> $GITHUB_OUTPUT
    outputs:
      sources: ${{ steps.setup-vars.outputs.sources }}
      datetimestr: ${{ steps.setup-vars.outputs.datetimestr }}

  build-emacs:
    runs-on: ubuntu-latest
    needs:
      - prepare-builder-docker
      - prepare-tester-docker
      - setup-vars

    strategy:
      matrix:
        source: ${{ fromJson(needs.setup-vars.outputs.sources) }}
        build_gui: [ "x11", "pgtk", "no" ]

    steps:
    - name: Install fuse
      run: sudo apt-get install -y fuse libfuse2

    - name: Checkout
      uses: actions/checkout@v4

    - name: Download emacs source from repo
      uses: actions/checkout@v4
      with:
        repository: ${{ matrix.source.repo }}
        ref: ${{ matrix.source.ref }}
        path: emacs-src

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        path: /tmp
        merge-multiple: true

    - name: Load image
      run: |
        docker load -i /tmp/builder-image.tar
        docker load -i /tmp/tester-image_ubuntu2004.tar
        docker image ls -a

    - name: Build and package
      run: ./build.sh builder-image:latest ./emacs-src BUILD_GUI=${{ matrix.build_gui }}

    - name: Test in ubuntu 20.04 container
      run: |
        docker run -v ./dist:/dist -v ./scripts:/scripts tester-image:ubuntu2004 \
          /scripts/test_emacs_in_docker.sh /dist/Emacs.AppImage

    - name: Test in archlinux container (nox only)
      if: ${{ matrix.build_gui == 'no' }}
      run: |
        docker run -v ./dist:/dist -v ./scripts:/scripts archlinux:latest \
          /scripts/test_emacs_in_docker.sh /dist/Emacs.AppImage

    - name: Upload binary to release
      uses: svenstaro/upload-release-action@v2
      if: ${{ !contains(github.ref, 'dev-') }}
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: dist/Emacs.AppImage
        asset_name: Emacs-${{ matrix.source.name }}-${{ matrix.build_gui == 'no' && 'nox' || matrix.build_gui }}.AppImage
        tag: ${{ github.event_name == 'schedule' && format('daily-master-build-{0}', needs.setup-vars.outputs.datetimestr) || github.ref }}
        release_name: "${{ github.event_name == 'schedule' && 'Daily master build' || 'Release build' }} ${{ needs.setup-vars.outputs.datetimestr }}"
        prerelease: ${{ github.event_name == 'schedule' }}
        make_latest: ${{ github.event_name != 'schedule' }}
        body: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
